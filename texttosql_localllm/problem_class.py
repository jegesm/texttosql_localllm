import os
from . import utils

# How to measure the accuracy of the generated SQL query
ACCURACY = {
    "INCORRECT" :0, # Incorrect SQL query
    "SYNTACTICALLY_CORRECT": 1, # Wrong SQL query, but syntactically  correct
    "TABLES_CORRECT": 1, # table name(s) are correct
    "TABLES_COLUMNS_CORRECT": 1, # table name(s) and column name(s) are correct
    "CORRECT": 5 # Correct SQL query
}


class Problem: 

    def __init__(self, question):
        self.qid = -1  # Original question id
        self.question:  str = question
        self.additional_questions:  List[str] = []
        self.similar_examples: List[dict] = []
        self.tables_to_use: List[str] = []
        self.sql_query: List[str] = []
        self.answer: List[str] = []
        self.error: List[str] = []
        self.extra: dict = {}
        self.prompt: str = ""
        self.number_of_max_steps: int = 0
        self.model_name: str = ""
        
        self.accuracy_score: int = ACCURACY["INCORRECT"]

    @property
    def to_dict(self):
        return {
            "question": self.question,
            "additional_questions": self.additional_questions,
            "similar_examples": self.similar_examples,
            "tables_to_use": self.tables_to_use,
            "accuracy_score": self.accuracy_score,
            "sql_query": self.sql_query,
            "answer": self.answer,
            "error": self.error,
            "extra": self.extra,
            "prompt": self.prompt,
            "number_of_max_steps": self.number_of_max_steps,
            "model_name": self.model_name,
            "qid": self.qid
        }
    
    def __str__(self): 
        return self.to_dict

    def add_question(self, question):
        self.additional_questions.append(question)

    def add_example(self, example):
        """ e.g. given a vector database that contains examples of vectors, this function would add the id of a vector """
        self.similar_examples.append(example)

    def add_sql_queries(self, query, answer="", error=None):
        """ The translated SQL query that was generated by a language model from the question
          The corrected SQL query that was generated by a language model from the first generated query if it was incorrect 
          """
        self.sql_query.append(query)
        self.answer = answer
        self.error.append(error)

    def export(self, prefix="", param=None):
        """
        Export the problem to a parquet file and sqlite
        param defines a non default result table
        """
        import pandas as pd

        # Convert p1.to_dict to a DataFrame
        df = pd.DataFrame([self.to_dict])

        # Define the parquet file path
        parquet_file_path = f"result_{prefix}.parquet"

        # Check if the parquet file already exists
        if os.path.exists(parquet_file_path):
            # If the file exists, read the existing data
            existing_df = pd.read_parquet(parquet_file_path)
            # Append the new data to the existing data
            df = pd.concat([existing_df, df], ignore_index=True)

        # Write the DataFrame to the parquet file
        #df.to_parquet(parquet_file_path, index=False)
        utils.upload_result(prefix, param, self.to_dict)

# %%



